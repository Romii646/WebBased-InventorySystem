This script combines all the tables into a single view table.
  at the end of the script, i'll show ways to query broken, in_use, or storaged components. I'll also leave a way to get a specific component list as well.

Below is the raw sql for this table:
------------------------

  
CREATE VIEW all_components AS
SELECT
    'Motherboard' AS component_type,
    mobo_id AS component_id,
    name,
    condition,
    status,
    cost,
    size,
    NULL AS type, -- For RAM, Storage, Accessories
    NULL AS speed, -- For RAM
    NULL AS wattage, -- For PSU
    NULL AS modular, -- For PSU
    NULL AS platform -- For CPU
FROM motherboards

UNION ALL

SELECT
    'GPU' AS component_type,
    gpu_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    NULL AS type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM gpu

UNION ALL

SELECT
    'RAM' AS component_type,
    ram_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    type,
    speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM ram

UNION ALL

SELECT
    'PSU' AS component_type,
    psu_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    NULL AS type,
    NULL AS speed,
    wattage,
    modular,
    NULL AS platform
FROM psu

UNION ALL

SELECT
    'Monitor' AS component_type,
    monitor_id AS component_id,
    name,
    condition,
    status,
    cost,
    size,
    NULL AS type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM monitor

UNION ALL

SELECT
    'Accessory' AS component_type,
    accesory_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM accessories

UNION ALL

SELECT
    'Keyboard' AS component_type,
    keyboard_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    NULL AS type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM keyboard

UNION ALL

SELECT
    'Mouse' AS component_type,
    mouse_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    NULL AS type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM mouse

UNION ALL

SELECT
    'Case' AS component_type,
    case_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    NULL AS type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM pccase

UNION ALL

SELECT
    'Storage' AS component_type,
    storage_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    NULL AS platform
FROM storage

UNION ALL

SELECT
    'CPU' AS component_type,
    cpu_id AS component_id,
    name,
    condition,
    status,
    cost,
    NULL AS size,
    NULL AS type,
    NULL AS speed,
    NULL AS wattage,
    NULL AS modular,
    platform
FROM cpu;

  // to select and show the entire table, the sql is below.
    SELECT * FROM all_components;
  -------------------------------------
To Query a broken, in use, or storaged component, use the below sql: 
  //broken
  SELECT * FROM all_components WHERE status = 'BROKEN';
  // In use
    SELECT * FROM all_components WHERE status = 'IN_USE';
// storage
    SELECT * FROM all_components WHERE status = 'STORAGE';


***********************************************************************************************************************************
CREATE VIEW stored_components_storage AS
SELECT 'Accessory' AS category, acc_id AS component_id, name, type, `condition`, cost, location AS status FROM accessories WHERE location = 'STORAGE'
UNION ALL
SELECT 'GPU' AS category, gpu_id AS component_id, name, NULL AS type, `condition`, cost, status FROM graphicscards WHERE status = 'STORAGE'
UNION ALL
SELECT 'Keyboard' AS category, kb_id AS component_id, name, NULL AS type, `condition`, cost, status FROM keyboards WHERE status = 'STORAGE'
UNION ALL
SELECT 'Mouse' AS category, mouse_id AS component_id, name, NULL AS type, `condition`, cost, location AS status FROM mice WHERE location = 'STORAGE'
UNION ALL
SELECT 'Monitor' AS category, monitor_id AS component_id, name, width AS type, `condition`, cost, status FROM monitors WHERE status = 'STORAGE'
UNION ALL
SELECT 'Motherboard' AS category, mobo_id AS component_id, name, size AS type, `condition`, cost, status FROM motherboards WHERE status = 'STORAGE'
UNION ALL
SELECT 'Power Supply' AS category, psu_id AS component_id, name, wattage AS type, `condition`, cost, status FROM powersupplies WHERE status = 'STORAGE'
UNION ALL
SELECT 'RAM' AS category, ram_id AS component_id, name, type, `condition`, cost, status FROM ramsticks WHERE status = 'STORAGE'
UNION ALL
SELECT 'TOTAL' AS category, NULL AS component_id, NULL AS name, NULL AS type, NULL AS `condition`, SUM(cost) AS cost, NULL AS status FROM (
    SELECT cost FROM accessories WHERE location = 'STORAGE'
    UNION ALL SELECT cost FROM graphicscards WHERE status = 'STORAGE'
    UNION ALL SELECT cost FROM keyboards WHERE status = 'STORAGE'
    UNION ALL SELECT cost FROM mice WHERE location = 'STORAGE'
    UNION ALL SELECT cost FROM monitors WHERE status = 'STORAGE'
    UNION ALL SELECT cost FROM motherboards WHERE status = 'STORAGE'
    UNION ALL SELECT cost FROM powersupplies WHERE status = 'STORAGE'
    UNION ALL SELECT cost FROM ramsticks WHERE status = 'STORAGE'
) AS all_costs;
*************************************************************************************************************************************************************************
CREATE VIEW component_totals AS
SELECT 'Accessory' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM accessories
UNION ALL
SELECT 'GPU' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM graphicscards
UNION ALL
SELECT 'Keyboard' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM keyboards
UNION ALL
SELECT 'Mouse' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM mice
UNION ALL
SELECT 'Monitor' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM monitors
UNION ALL
SELECT 'Motherboard' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM motherboards
UNION ALL
SELECT 'Power Supply' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM powersupplies
UNION ALL
SELECT 'RAM' AS category, COUNT(*) AS total_count, SUM(cost) AS total_cost FROM ramsticks
UNION ALL
SELECT 'TOTAL' AS category, SUM(total_count) AS total_count, SUM(total_cost) AS total_cost FROM (
    SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM accessories
    UNION ALL SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM graphicscards
    UNION ALL SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM keyboards
    UNION ALL SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM mice
    UNION ALL SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM monitors
    UNION ALL SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM motherboards
    UNION ALL SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM powersupplies
    UNION ALL SELECT COUNT(*) AS total_count, SUM(cost) AS total_cost FROM ramsticks
) AS all_totals;
**************************************************************************************************************************************************************************************
Create the Storage_Slots table
CREATE TABLE Storage_Slots (
    StorageSlot_ID VARCHAR(50) PRIMARY KEY,  -- Unique identifier for the storage slot
    Slot_Name VARCHAR(100)                   -- Name/description of the slot
);
CREATE TABLE Storage_Components (
    Component_ID VARCHAR(50) PRIMARY KEY,        -- Unique identifier for components
    StorageSlot_ID VARCHAR(50),                 -- Foreign key referencing Storage_Slots (nullable)
    Component_Type ENUM('SSD', 'HDD', 'RAM') NOT NULL, -- Component type with ENUM
    Component_Specs VARCHAR(255),               -- Detailed specs of the component
    FOREIGN KEY (StorageSlot_ID) REFERENCES Storage_Slots(StorageSlot_ID)
);
*************************************************************************************************************************************************************************************************
